// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/dc0d/workshop/domain_model"
	"sync"
)

var (
	lockBankStatementMockRun sync.RWMutex
)

// Ensure, that BankStatementMock does implement model.BankStatement.
// If this is not the case, regenerate this file with moq.
var _ model.BankStatement = &BankStatementMock{}

// BankStatementMock is a mock implementation of model.BankStatement.
//
//     func TestSomethingThatUsesBankStatement(t *testing.T) {
//
//         // make and configure a mocked model.BankStatement
//         mockedBankStatement := &BankStatementMock{
//             RunFunc: func(id string) (*model.Statement, error) {
// 	               panic("mock out the Run method")
//             },
//         }
//
//         // use mockedBankStatement in code that requires model.BankStatement
//         // and then make assertions.
//
//     }
type BankStatementMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(id string) (*model.Statement, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// ID is the id argument value.
			ID string
		}
	}
}

// Run calls RunFunc.
func (mock *BankStatementMock) Run(id string) (*model.Statement, error) {
	if mock.RunFunc == nil {
		panic("BankStatementMock.RunFunc: method is nil but BankStatement.Run was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockBankStatementMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockBankStatementMockRun.Unlock()
	return mock.RunFunc(id)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedBankStatement.RunCalls())
func (mock *BankStatementMock) RunCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockBankStatementMockRun.RLock()
	calls = mock.calls.Run
	lockBankStatementMockRun.RUnlock()
	return calls
}
