// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/dc0d/workshop/domain_model"
	"sync"
)

var (
	lockHandleTransactionFactoryMockCreateHandleTransaction sync.RWMutex
)

// Ensure, that HandleTransactionFactoryMock does implement model.HandleTransactionFactory.
// If this is not the case, regenerate this file with moq.
var _ model.HandleTransactionFactory = &HandleTransactionFactoryMock{}

// HandleTransactionFactoryMock is a mock implementation of model.HandleTransactionFactory.
//
//     func TestSomethingThatUsesHandleTransactionFactory(t *testing.T) {
//
//         // make and configure a mocked model.HandleTransactionFactory
//         mockedHandleTransactionFactory := &HandleTransactionFactoryMock{
//             CreateHandleTransactionFunc: func(in1 model.AccountRepository) model.HandleTransaction {
// 	               panic("mock out the CreateHandleTransaction method")
//             },
//         }
//
//         // use mockedHandleTransactionFactory in code that requires model.HandleTransactionFactory
//         // and then make assertions.
//
//     }
type HandleTransactionFactoryMock struct {
	// CreateHandleTransactionFunc mocks the CreateHandleTransaction method.
	CreateHandleTransactionFunc func(in1 model.AccountRepository) model.HandleTransaction

	// calls tracks calls to the methods.
	calls struct {
		// CreateHandleTransaction holds details about calls to the CreateHandleTransaction method.
		CreateHandleTransaction []struct {
			// In1 is the in1 argument value.
			In1 model.AccountRepository
		}
	}
}

// CreateHandleTransaction calls CreateHandleTransactionFunc.
func (mock *HandleTransactionFactoryMock) CreateHandleTransaction(in1 model.AccountRepository) model.HandleTransaction {
	if mock.CreateHandleTransactionFunc == nil {
		panic("HandleTransactionFactoryMock.CreateHandleTransactionFunc: method is nil but HandleTransactionFactory.CreateHandleTransaction was just called")
	}
	callInfo := struct {
		In1 model.AccountRepository
	}{
		In1: in1,
	}
	lockHandleTransactionFactoryMockCreateHandleTransaction.Lock()
	mock.calls.CreateHandleTransaction = append(mock.calls.CreateHandleTransaction, callInfo)
	lockHandleTransactionFactoryMockCreateHandleTransaction.Unlock()
	return mock.CreateHandleTransactionFunc(in1)
}

// CreateHandleTransactionCalls gets all the calls that were made to CreateHandleTransaction.
// Check the length with:
//     len(mockedHandleTransactionFactory.CreateHandleTransactionCalls())
func (mock *HandleTransactionFactoryMock) CreateHandleTransactionCalls() []struct {
	In1 model.AccountRepository
} {
	var calls []struct {
		In1 model.AccountRepository
	}
	lockHandleTransactionFactoryMockCreateHandleTransaction.RLock()
	calls = mock.calls.CreateHandleTransaction
	lockHandleTransactionFactoryMockCreateHandleTransaction.RUnlock()
	return calls
}
