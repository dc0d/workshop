// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repositories_test

import (
	"github.com/dc0d/workshop/model"
	"sync"
)

var (
	lockAccountRepositoryMockFind sync.RWMutex
	lockAccountRepositoryMockSave sync.RWMutex
)

// Ensure, that AccountRepositoryMock does implement model.AccountRepository.
// If this is not the case, regenerate this file with moq.
var _ model.AccountRepository = &AccountRepositoryMock{}

// AccountRepositoryMock is a mock implementation of model.AccountRepository.
//
//     func TestSomethingThatUsesAccountRepository(t *testing.T) {
//
//         // make and configure a mocked model.AccountRepository
//         mockedAccountRepository := &AccountRepositoryMock{
//             FindFunc: func(in1 string) (*model.Account, error) {
// 	               panic("mock out the Find method")
//             },
//             SaveFunc: func(in1 *model.Account) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedAccountRepository in code that requires model.AccountRepository
//         // and then make assertions.
//
//     }
type AccountRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(in1 string) (*model.Account, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 *model.Account) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 *model.Account
		}
	}
}

// Find calls FindFunc.
func (mock *AccountRepositoryMock) Find(in1 string) (*model.Account, error) {
	if mock.FindFunc == nil {
		panic("AccountRepositoryMock.FindFunc: method is nil but AccountRepository.Find was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockAccountRepositoryMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockAccountRepositoryMockFind.Unlock()
	return mock.FindFunc(in1)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedAccountRepository.FindCalls())
func (mock *AccountRepositoryMock) FindCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockAccountRepositoryMockFind.RLock()
	calls = mock.calls.Find
	lockAccountRepositoryMockFind.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AccountRepositoryMock) Save(in1 *model.Account) error {
	if mock.SaveFunc == nil {
		panic("AccountRepositoryMock.SaveFunc: method is nil but AccountRepository.Save was just called")
	}
	callInfo := struct {
		In1 *model.Account
	}{
		In1: in1,
	}
	lockAccountRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockAccountRepositoryMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedAccountRepository.SaveCalls())
func (mock *AccountRepositoryMock) SaveCalls() []struct {
	In1 *model.Account
} {
	var calls []struct {
		In1 *model.Account
	}
	lockAccountRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockAccountRepositoryMockSave.RUnlock()
	return calls
}
