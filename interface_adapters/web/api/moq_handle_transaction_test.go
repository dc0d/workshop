// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/dc0d/workshop/domain_model"
	"sync"
)

var (
	lockHandleTransactionMockRun sync.RWMutex
)

// Ensure, that HandleTransactionMock does implement model.HandleTransaction.
// If this is not the case, regenerate this file with moq.
var _ model.HandleTransaction = &HandleTransactionMock{}

// HandleTransactionMock is a mock implementation of model.HandleTransaction.
//
//     func TestSomethingThatUsesHandleTransaction(t *testing.T) {
//
//         // make and configure a mocked model.HandleTransaction
//         mockedHandleTransaction := &HandleTransactionMock{
//             RunFunc: func(in1 model.HandleTransactionOption) error {
// 	               panic("mock out the Run method")
//             },
//         }
//
//         // use mockedHandleTransaction in code that requires model.HandleTransaction
//         // and then make assertions.
//
//     }
type HandleTransactionMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(in1 model.HandleTransactionOption) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// In1 is the in1 argument value.
			In1 model.HandleTransactionOption
		}
	}
}

// Run calls RunFunc.
func (mock *HandleTransactionMock) Run(in1 model.HandleTransactionOption) error {
	if mock.RunFunc == nil {
		panic("HandleTransactionMock.RunFunc: method is nil but HandleTransaction.Run was just called")
	}
	callInfo := struct {
		In1 model.HandleTransactionOption
	}{
		In1: in1,
	}
	lockHandleTransactionMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockHandleTransactionMockRun.Unlock()
	return mock.RunFunc(in1)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedHandleTransaction.RunCalls())
func (mock *HandleTransactionMock) RunCalls() []struct {
	In1 model.HandleTransactionOption
} {
	var calls []struct {
		In1 model.HandleTransactionOption
	}
	lockHandleTransactionMockRun.RLock()
	calls = mock.calls.Run
	lockHandleTransactionMockRun.RUnlock()
	return calls
}
