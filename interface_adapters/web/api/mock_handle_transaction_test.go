// Code generated by MockGen. DO NOT EDIT.
// Source: ./../../../model/usecase_handle_transaction.go

// Package api is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/dc0d/workshop/model"
	reflect "reflect"
)

// MockHandleTransaction is a mock of HandleTransaction interface
type MockHandleTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockHandleTransactionMockRecorder
}

// MockHandleTransactionMockRecorder is the mock recorder for MockHandleTransaction
type MockHandleTransactionMockRecorder struct {
	mock *MockHandleTransaction
}

// NewMockHandleTransaction creates a new mock instance
func NewMockHandleTransaction(ctrl *gomock.Controller) *MockHandleTransaction {
	mock := &MockHandleTransaction{ctrl: ctrl}
	mock.recorder = &MockHandleTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandleTransaction) EXPECT() *MockHandleTransactionMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHandleTransaction) Run(arg0 model.HandleTransactionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockHandleTransactionMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHandleTransaction)(nil).Run), arg0)
}
