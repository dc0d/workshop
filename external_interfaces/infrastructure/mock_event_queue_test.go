// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package infrastructure_test

import (
	model "github.com/dc0d/workshop/domain_model"
	"sync"
)

var (
	lockEventQueueMockConsume sync.RWMutex
	lockEventQueueMockPublish sync.RWMutex
)

// Ensure, that EventQueueMock does implement model.EventQueue.
// If this is not the case, regenerate this file with moq.
var _ model.EventQueue = &EventQueueMock{}

// EventQueueMock is a mock implementation of model.EventQueue.
//
//     func TestSomethingThatUsesEventQueue(t *testing.T) {
//
//         // make and configure a mocked model.EventQueue
//         mockedEventQueue := &EventQueueMock{
//             ConsumeFunc: func() <-chan model.EventRecord {
// 	               panic("mock out the Consume method")
//             },
//             PublishFunc: func(in1 ...model.EventRecord) error {
// 	               panic("mock out the Publish method")
//             },
//         }
//
//         // use mockedEventQueue in code that requires model.EventQueue
//         // and then make assertions.
//
//     }
type EventQueueMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func() <-chan model.EventRecord

	// PublishFunc mocks the Publish method.
	PublishFunc func(in1 ...model.EventRecord) error

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
		}
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// In1 is the in1 argument value.
			In1 []model.EventRecord
		}
	}
}

// Consume calls ConsumeFunc.
func (mock *EventQueueMock) Consume() <-chan model.EventRecord {
	if mock.ConsumeFunc == nil {
		panic("EventQueueMock.ConsumeFunc: method is nil but EventQueue.Consume was just called")
	}
	callInfo := struct {
	}{}
	lockEventQueueMockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	lockEventQueueMockConsume.Unlock()
	return mock.ConsumeFunc()
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//     len(mockedEventQueue.ConsumeCalls())
func (mock *EventQueueMock) ConsumeCalls() []struct {
} {
	var calls []struct {
	}
	lockEventQueueMockConsume.RLock()
	calls = mock.calls.Consume
	lockEventQueueMockConsume.RUnlock()
	return calls
}

// Publish calls PublishFunc.
func (mock *EventQueueMock) Publish(in1 ...model.EventRecord) error {
	if mock.PublishFunc == nil {
		panic("EventQueueMock.PublishFunc: method is nil but EventQueue.Publish was just called")
	}
	callInfo := struct {
		In1 []model.EventRecord
	}{
		In1: in1,
	}
	lockEventQueueMockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	lockEventQueueMockPublish.Unlock()
	return mock.PublishFunc(in1...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedEventQueue.PublishCalls())
func (mock *EventQueueMock) PublishCalls() []struct {
	In1 []model.EventRecord
} {
	var calls []struct {
		In1 []model.EventRecord
	}
	lockEventQueueMockPublish.RLock()
	calls = mock.calls.Publish
	lockEventQueueMockPublish.RUnlock()
	return calls
}
